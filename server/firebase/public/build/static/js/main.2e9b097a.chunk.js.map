{"version":3,"sources":["components/map2.js","components/clocky.js","components/stats.js","components/EmergencyList.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["ArcgisMap","react_default","a","createElement","id","_this","this","loadModules","then","_ref","_ref2","Object","slicedToArray","Map","MapView","Graphic","Point","Circle","SimpleMarkerSymbol","Polyline","SimpleLineSymbol","setState","map","basemap","ground","currentPoint","props","originPoint","pointGraphic","geometry","symbol","color","outline","width","ring1","center","radius","radiusUnit","ring1Graphic","type","ring1Text","haloColor","haloSize","text","xoffset","yoffset","font","size","family","weight","view","container","zoom","graphics","add","on","event","console","log","mapPoint","prevProps","_this2","state","emergencies","length","forEach","emergency","polyline","paths","location","lng","lat","longitude","latitude","lineSymbol","polylineGraphic","emergency_point","markerSymbol","emergencyGraphic","goTo","Component","clocky","currentTime","moment","format","setInterval","card","statistic","title","value","valueStyle","React","Stats","style","background","padding","row","gutter","col","span","safe","precision","prefix","icon","theme","twoToneColor","className","fontSize","clocky_clocky","EmergencyList","parseDate","dt","date","Date","getHours","getMinutes","getSeconds","renderItem","item","list_default","Item","icon_default","display","flexDirection","justifyContent","injury","lat1","lon1","lat2","lon2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","distance","toPrecision","name","timestamp","margin","bordered","header","fontWeight","dataSource","stanfordPoint","firebase","apiKey","authDomain","databaseURL","accidentRef","ref","App","snapshot","val","spong123","obj","now","height","src","stats_Stats","alignItems","map2_ArcgisMap","EmergencyList_EmergencyList","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e9b097a.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport { loadModules } from '@esri/react-arcgis';\n\nexport default class ArcgisMap extends Component {\n    render(){\n        return(\n            <div id=\"mapViewDiv\"></div>\n        )\n    }\n    componentDidMount(){\n        loadModules([\n            \"esri/Map\",\n            \"esri/views/MapView\",\n            \"esri/Graphic\",\n            \"esri/geometry/Point\",\n            \"esri/geometry/Circle\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/geometry/Polyline\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"dojo/domReady!\"\n          ]).then(([Map, MapView, Graphic, Point, Circle, SimpleMarkerSymbol, Polyline, SimpleLineSymbol]) =>{\n            this.setState({\n              Polyline: Polyline,\n              SimpleLineSymbol: SimpleLineSymbol,\n              Graphic: Graphic,\n              Point: Point, \n              SimpleMarkerSymbol: SimpleMarkerSymbol\n            })\n      \n            var map = new Map({\n              //basemap: \"topo-vector\"\n              basemap: \"streets-navigation-vector\",\n              ground: \"world-elevation\"\n            });\n            var currentPoint = new Point(\n                this.props.originPoint\n              );\n            \n                // Create a symbol for drawing the point\n            var markerSymbol = new SimpleMarkerSymbol({\n                color: [226, 119, 40],\n                outline: {\n                color: [255, 255, 255],\n                width: 1\n                }\n            });\n             // Create a graphic and add the geometry and symbol to it\n            var pointGraphic = new Graphic({\n                geometry: currentPoint,\n                symbol: markerSymbol\n            });\n            var ring1 = new Circle({\n                center: currentPoint,\n                radius: 2000,\n                radiusUnit: 'meters'\n            })\n            var fillSymbol = {\n                type: \"simple-fill\", // autocasts as new SimpleFillSymbol()\n                color: [227, 139, 79, 0.15],\n                outline: { // autocasts as new SimpleLineSymbol()\n                color: [0,0,0],\n                width: 1\n                }\n            };\n            var textSymbol = {\n                type: \"text\",  // autocasts as new TextSymbol()\n                color: \"white\",\n                haloColor: \"black\",\n                haloSize: \"1px\",\n                text: \"10 mins\",\n                xoffset: 0,\n                yoffset: 0,\n                font: {  // autocast as new Font()\n                  size: 12,\n                  family: \"sans-serif\",\n                  weight: \"bold\"\n                }\n              };\n            var ring1Graphic = new Graphic({\n                geometry: ring1, \n                symbol: fillSymbol\n            })\n\n            var ring1Text = new Graphic({\n                geometry: ring1, \n                symbol:textSymbol \n            })\n\n            var view = new MapView({\n              container: \"mapViewDiv\",\n              map: map,\n            center: [ -122.17284, 37.4298937],\n              zoom: 13,\n            });\n            view.graphics.add(pointGraphic);\n            view.graphics.add(ring1Graphic);\n            view.graphics.add(ring1Text);\n            view.on(\"click\", function(event) {\n                console.log(\"click event: \", event.mapPoint);\n              });\n              this.setState({\n                view: view\n              })\n          });\n    }\n    componentDidUpdate(prevProps){\n      if(((this.state.view && this.state.Polyline && this.state.SimpleLineSymbol && this.state.Graphic )&&(!prevProps.emergencies && (this.props.emergencies && this.props.emergencies.length > 0)))|| prevProps.emergencies.length < this.props.emergencies.length) {\n        this.props.emergencies.forEach((emergency)=>{\n          var polyline = new this.state.Polyline({\n            paths: [\n              [emergency.location.lng, emergency.location.lat],\n              [this.props.originPoint.longitude, this.props.originPoint.latitude]\n            ]\n          });\n        \n          // Create a symbol for drawing the line\n          var lineSymbol = new this.state.SimpleLineSymbol({\n            color: [226, 119, 40],\n            width: 4\n          });\n        \n          // Create a line graphic\n          var polylineGraphic = new this.state.Graphic({\n            geometry: polyline,\n            symbol: lineSymbol\n          })\n          this.state.view.graphics.add(polylineGraphic);\n            var emergency_point = new this.state.Point(\n              {\n                longitude:emergency.location.lng,\n                latitude: emergency.location.lat\n              }\n\n              );\n            \n                // Create a symbol for drawing the point\n            var markerSymbol = new this.state.SimpleMarkerSymbol({\n                color: [206, 17 , 38],\n                outline: {\n                color: [255, 255, 255],\n                width: 2\n                }\n            });\n             // Create a graphic and add the geometry and symbol to it\n            var emergencyGraphic = new this.state.Graphic({\n                geometry: emergency_point,\n                symbol: markerSymbol\n            });\n          this.state.view.goTo(polylineGraphic);\n          this.state.view.graphics.add(emergencyGraphic);\n        })\n\n    }\n  }\n}\n","import React from 'react';\nimport {Card, Statistic} from 'antd';\nimport moment from 'moment';\nexport default class clocky extends React.Component{\n  state={\n      currentTime: moment().format('hh:mm:ss')\n  }\n\n  componentDidMount () {\n    setInterval(()=>{\n    this.setState({\n      currentTime: moment().format('HH:mm:ss')\n    })\n    }, 1000);\n\n  }\n    render(){\n        return (\n                    <Card>\n                    <Statistic\n                        title=\"Current Time\"\n                        value={this.state.currentTime}\n                        valueStyle={{ color: 'grey' }}\n                    />\n                    </Card>\n        );\n    }\n}","import React from 'react';\nimport { Statistic, Card, Row, Col, Icon } from 'antd';\nimport Clocky from './clocky';\nexport default class Stats extends React.Component{\n    render(){\n      console.log('rerendering')\n        return (\n            <div style={{ background: '#ECECEC', padding: '20px' }}>\n            <Row gutter={13}>\n              <Col span={8}>\n                <Card>\n                    {this.props.safe === true ? \n                  <Statistic\n                    title=\"Status\"\n                    value={\"Safe\"}\n                    precision={2}\n                    valueStyle={{ color: '#3f8600' }}\n                    prefix={\n                        <Icon type=\"check-circle\" theme=\"twoTone\" twoToneColor=\"#52c41a\" />\n                    }\n                  />\n                  : \n                  <Statistic\n                    title=\"Status\"\n                    value={\"Emergency!\"}\n                    precision={2}\n                    valueStyle={{ color: '#a33030' }}\n                    prefix={\n                        <Icon \n                        className=\"el-item animated infinite flash\" type=\"warning\"\n                        theme=\"twoTone\" twoToneColor=\"#eb2f96\"\n                        style={{fontSize:'20px'}}\n                        />\n                    }\n                  />\n                }\n                </Card>\n              </Col>\n              <Col span={8}>\n                <Card>\n                  <Statistic\n                    title=\"EMS Fleet on standby\"\n                    value={5}\n                    valueStyle={{ color: 'grey' }}\n                    prefix={\n                        <Icon type=\"car\" />\n                    }\n                  />\n                </Card>\n              </Col>\n              <Col span={8}>\n              <Clocky/>\n              </Col>\n            </Row>\n          </div>\n        );\n    }\n}","import React from 'react';\nimport List from 'antd/lib/list';\nimport Icon from 'antd/lib/icon';\nimport {distance} from '../utils';\nexport default class EmergencyList extends React.Component {\n\n    /*\n    location (lat lng) & distance\n    victim name\n    injury\n    time\n    PROPS:\n    list: an array of type:\n    {location: {lat: , lng: } , distanceMiles: , name: , injury: , timestamp:  }\n    */\n\n    parseDate = (dt)=>{\n       const date = new Date(dt); \n        return (date.getHours() + ':' + date.getMinutes() + ':' + (date.getSeconds() >= 10? '':'0') + date.getSeconds());\n    }\n    renderItem = (item)=>{\n        return (\n            <List.Item>\n                <Icon \n                className=\"el-item animated infinite flash\" type=\"warning\"\n                theme=\"twoTone\" twoToneColor=\"#eb2f96\"\n                style={{fontSize:'20px'}}\n                />\n                <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n                    <h3 className=\"el-item-text\">{item.injury}</h3>\n                    <h3 className=\"el-item-text\">{distance(item.location.lat, item.location.lng, this.props.originPoint.latitude, this.props.originPoint.longitude).toPrecision(2)} miles</h3>\n                    <h3 className='el-item-text'>{item.name} </h3>\n                    <h3 className='el-item-text'>{this.parseDate(item.timestamp)} </h3>\n                </div>\n\n            </List.Item>\n\n        );\n    }\n    render () {\n        return (\n            <List\n                style={{margin: '5px',  width:'50%'}}\n                bordered\n                header={\n                    <h1 style={{fontWeight:'340'}}>Emergencies</h1>\n                }\n                dataSource={this.props.emergencies}\n                renderItem={this.renderItem}\n\n            />\n            \n\n        );\n\n    }\n}","\nfunction distance(lat1, lon1, lat2, lon2 ) {\n\tif ((lat1 == lat2) && (lon1 == lon2)) {\n\t\treturn 0;\n\t}\n\telse {\n\t\tvar radlat1 = Math.PI * lat1/180;\n\t\tvar radlat2 = Math.PI * lat2/180;\n\t\tvar theta = lon1-lon2;\n\t\tvar radtheta = Math.PI * theta/180;\n\t\tvar dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\t\tif (dist > 1) {\n\t\t\tdist = 1;\n\t\t}\n\t\tdist = Math.acos(dist);\n\t\tdist = dist * 180/Math.PI;\n        dist = dist * 60 * 1.1515;\n        /*\n        unit is default in M (miles).\n\t\tif (unit==\"K\") { dist = dist * 1.609344 }\n        if (unit==\"N\") { dist = dist * 0.8684 }\n        */\n\t\treturn dist;\n\t}\n}\nexport {distance};","import React, { Component } from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport ArcgisMap from './components/map2';\n\nimport Stats from './components/stats';\nimport EmergencyList from './components/EmergencyList';\nimport * as firebase from 'firebase';\n\nconst stanfordPoint = {\n    longitude: -122.174626,\n    latitude: 37.434035\n}\n\nconst config = {\n  apiKey: \"AIzaSyAXJg0mvp2ZkommGE63YVxDcKk_7TqkFok\",\n  authDomain: \"treehacks-2c696.firebaseapp.com\",\n  databaseURL: \"https://treehacks-2c696.firebaseio.com/\"\n};\n\nfirebase.initializeApp(config);\n\nconst accidentRef = firebase.database().ref(\"accident\");\n\nclass App extends Component {\n  state={\n    emergencies : []\n  }\n  componentDidMount(){\n    /* link up to websocket here */\n    // setTimeout(()=>{\n    //   this.setState({\n    //     emergencies: example_victims\n    //   })\n    // }, 6000);\n    accidentRef.on('value', (snapshot) => {\n      if (snapshot.val() == null) {\n        this.setState({\n          emergencies: []\n        });\n      } else {\n        const val = snapshot.val().spong123;\n        const obj = {\n          location: {\n            lat:val.location.lat,  \n            lng:val.location.lng\n          },  \n          name: val.name, \n          injury: val.injury, \n          timestamp: Date.now()\n        }\n\n        this.setState({\n          emergencies: [\n            obj\n          ]\n        });\n      }\n    });\n  }\n  render() {\n    return (\n      <div> \n        <img style={{\n          display: 'block',\n          margin: '10px',\n        }}\n        height=\"62\" width=\"200\"\n        src=\"stanford-med.png\"/>\n          <Stats\n            safe = {!this.state.emergencies || this.state.emergencies.length === 0} // set this to false for danger.\n          />\n        <div style={{display: 'flex', flexDirection: 'row', alignItems: 'flex-start',justifyContent: 'center'}}>\n          <ArcgisMap\n          style={{width: '70%'}}\n            originPoint={stanfordPoint}\n            emergencies={this.state.emergencies}\n          />\n          <EmergencyList\n          style={{width: '30%'}}\n            originPoint={stanfordPoint}\n            emergencies={this.state.emergencies}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}